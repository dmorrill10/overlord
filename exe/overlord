#!/usr/bin/env ruby
require 'thor'
require 'yaml'
require 'csv'
require 'process_runner'

module Overlord

  DEFAULT_CONFIG_FILE_PATH = File.join(Dir.pwd, 'config/overlord.yml')
  DEFAULT_PIDS_FILE_PATH = File.join(Dir.pwd, 'tmp/pids')
  DEFAULT_LOGS_FILE_PATH = File.join(Dir.pwd, 'log')

  def self.with_config_and_pids_files(options)
    config_path = File.absolute_path options[:config]
    pids_path = File.absolute_path options[:pids]

    if !File.directory?(File.dirname(pids_path))
      Dir.mkdir File.dirname(pids_path)
    end

    File.open(config_path, 'r') do |config_file|
      config = YAML.safe_load(config_file) || {}
      if !File.exists?(pids_path)
        File.open(pids_path, 'w') do |pids_file|
          yield config_file, config, pids_file, {} if block_given?
        end
      else
        File.open(pids_path, 'r+') do |pids_file|
          pids = YAML.safe_load(pids_file) || {}
          pids_file.seek(0, IO::SEEK_SET)
          pids_file.truncate(0)
          yield config_file, config, pids_file, pids if block_given?
        end
      end
    end
  end
  def self.process_exists?(pid)
    begin
      Process.getpgid pid
      true
    rescue Errno::ESRCH
      false
    end
  end
  def self.kill_process(pid) Process.kill('TERM', pid) end
  def self.force_kill_process(pid) Process.kill('KILL', pid) end

  module Actions
    def start_daemon(app, config, pids, pids_file_path, log_directory = nil, merge_out_and_err = nil)
      if pids[app]
        if Overlord.process_exists?(pids[app])
          say "WARNING: #{app} is already started (PID: #{pids[app]})."
          return
        else
          say "WARNING: #{app} was supposed to be running on with PID #{pids[app]} but it has died. Updating #{pids_file_path}."
          pids.delete app
        end
      end
      command = config[app]

      options = {}
      if log_directory
        if !File.directory?(log_directory)
          say_status :mkdir, "Creating log directory, \"#{log_directory}\"."
          Dir.mkdir log_directory
        end
        if merge_out_and_err
          options[:err] = :out
          options[:out] = [File.join(log_directory, "#{app}.log"), 'a']
        else
          options[:err] = [File.join(log_directory, "#{app}.log.e"), 'a']
          options[:out] = [File.join(log_directory, "#{app}.log.o"), 'a']
        end
      end

      desc = "`#{command}` from #{Dir.pwd}"

      say_status :run_as_daemon, desc
      pid = Process.detach(Process.spawn(command, options)).pid
      pids[app] = pid
      say_status :start, "#{app} started with PID #{pid}."
    end

    def stop_daemon(app, config, pids, pids_file_path)
      if pids[app]
        if Overlord.process_exists?(pids[app])
          Overlord.kill_process pids[app]
          sleep 1 # Give the process a chance to exit

          if Overlord.process_exists?(pids[app])
            Overlord.force_kill_process pids[app]
            sleep 1 # Give the process a chance to exit

            if Overlord.process_exists?(pids[app])
              say "ERROR: #{app} (PID: #{pids[app]}) could not be stopped."
            end
          end
        else
          say "WARNING: #{app} was supposed to be running on with PID #{pids[app]} but it has died. Updating #{pids_file_path}."
        end
        say_status :stop, "#{app} stopped."
        pids.delete app
      else
        say "WARNING: #{app} was not running."
      end
    end
  end

  class App < Thor
    include Thor::Actions
    include Actions

    def self.with_config
      method_option :config, :aliases => ['-c'], :default => DEFAULT_CONFIG_FILE_PATH, :desc => "YAML Config file listing applications to manage."
    end
    def self.with_pids
      method_option :pids, :aliases => ['-p'], :default => DEFAULT_PIDS_FILE_PATH, :desc => "Path to SSV file where application PIDs will be saved."
    end
    def self.with_logs
      method_option :logs, :aliases => ['-l'], :default => DEFAULT_LOGS_FILE_PATH, :desc => "Path to a directory where application standard out and error will be logged."
    end
    def self.with_merge_stdout_and_stderr
      method_option :merge, :type => :boolean, :aliases => ['-m'], :default => true, :desc => "Log application standard out and error together."
    end

    desc "status", "Show the status of managed applications."
    with_config
    with_pids
    def status
      Overlord.with_config_and_pids_files(options) do |config_file, config, pids_file, pids|
        config.keys.each do |app|
          if pids[app]
            if Overlord.process_exists?(pids[app])
              say "#{app} is running (PID: #{pids[app]})."
            else
              say "WARNING: #{app} was supposed to be running on with PID #{pids[app]} but it has died. Updating #{pids_file.path}."
              pids.delete app
            end
          else
            say "#{app} is not running."
          end
        end
        pids_file.write(YAML.dump(pids)) unless pids.empty?
      end
    end

    desc "start", "Start an application."
    with_config
    with_pids
    with_logs
    with_merge_stdout_and_stderr
    method_option :app, :aliases => ['-a'], :desc => "Application to start. Starts all if none specified."
    def start
      Overlord.with_config_and_pids_files(options) do |config_file, config, pids_file, pids|
        if options[:app]
          start_daemon(options[:app], config, pids, pids_file.path, options[:logs], options[:merge])
        else
          config.keys.each do |app|
            start_daemon(app, config, pids, pids_file.path, options[:logs], options[:merge])
          end
        end
        pids_file.write(YAML.dump(pids)) unless pids.empty?
      end
    end

    desc "stop", "Stop an application."
    with_config
    with_pids
    method_option :app, :aliases => ['-a'], :desc => "Application to stop. Stops all if none specified."
    def stop
      Overlord.with_config_and_pids_files(options) do |config_file, config, pids_file, pids|
        if options[:app]
          stop_daemon(options[:app], config, pids, pids_file.path)
        else
          config.keys.each do |app|
            stop_daemon(app, config, pids, pids_file.path)
          end
        end
        pids_file.write(YAML.dump(pids)) unless pids.empty?
      end
    end

    desc "restart", "Restart an application."
    with_config
    with_pids
    with_logs
    with_merge_stdout_and_stderr
    method_option :app, :aliases => ['-a'], :desc => "Application to restart. Restarts all if none specified."
    def restart
      stop
      start
    end
  end
end

Overlord::App.start
